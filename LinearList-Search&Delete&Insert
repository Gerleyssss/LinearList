#include<bits\stdc++.h>

using namespace std;

#define MaxSize 50
typedef int ElemType;

typedef struct {
	ElemType data[MaxSize];
	int length;
}SqList;

bool ListInsert(SqList& L, int i, ElemType e)//插入数据
{
	if (i<0 || i>L.length + 1)
	{
		return false;
	}
	if (L.length > MaxSize) {
		return false;
	}

	for (int j = L.length; j >= i; j--)
	{
		L.data[j] = L.data[j - 1];
	}
	L.data[i - 1] = e;
	L.length += 1;
	return true;
}

bool ListDelete(SqList& L, int i, ElemType& e)//删除元素
{
	if (i<0 || i>L.length)//判断删除位置是否合法
	{
		return false;
	}
	e = L.data[i - 1];
	for (int j = i; j < L.length; j++)
	{
		L.data[j - 1] = L.data[j];
	}
	L.length -= 1;
	return true;
}

int ListSearch(SqList& L, ElemType e)
{
	int i;
	for (i = 0; i < L.length; i++) {
		if (L.data[i] == e)
		{
			return i+1;
		}
	}
	return 0;
}

void PrintList(SqList& L)
{
	for (int i = 0; i < L.length; i++)
	{
		printf("%4d", L.data[i]);
	}
}

int main()
{
	SqList L;
	bool ret;//判断布尔型
	ElemType e;//删除的元素
	ElemType m;//返回查询的位置

	L.data[0] = 10;
	L.data[1] = 20;
	L.data[2] = 29;
	L.data[3] = 30;
	L.length = 4;

	ret = ListInsert(L, 5, 90);
	if (ret)
	{
		cout << "插入成功" << endl;
		PrintList(L);
		printf("\n");
	}
	else cout << "插入失败" << endl;

	ret = ListDelete(L, 1, e);
	if (ret)
	{
		printf("删除成功");
		printf("删除元素的值为：%4d", e);
		printf("\n");
		PrintList(L);
	}
	else {
		printf("删除失败");
	}
	printf("\n");
	m = ListSearch(L, 29);
	if (m)
	{
		printf("查询成功");
		printf("查询元素的位置：%4d", m);
	}
	else {
		printf("查询失败");
	}
	return 0;
}
